The easiest way to fix BadPotTwo was to just add the "synchronized" keywords to the getserving and fillpot functions. This way, we can avoid all threads executing the same function at the same time. When that happened, a lot of threads could think that there were enough servings when in fact there weren't (other threads were just about to get the remaining servings). This was accentuated by the fact that there was a sleep, which increased the time frame in which the serving information was not accurate.

Please, note that the answer depends on the way the JVM is implemented, if we would know the implementation details the answer may be different, but let's stick to it. We think that blocking a thread until it really has something to do, such as get the servings or fill the pot, is better than having a thread waking up every 200ms to check if the pot is ready to serve or ready to be filled up because it consumes computing time that could be wasted for nothing. The "Banket" solution follows the first approach so we think it's better than the second, the "BanketNoWait" approach.
